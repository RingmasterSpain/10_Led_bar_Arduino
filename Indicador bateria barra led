

/*  ==================================================================

  Sketch control de batería, pensado para su funcionamiento en un Atmetl 328P
  Activa una barra de LEDS según el voltaje y tipo batería (Divisor voltaje)
  Azul sobrecarga, Verde 50-90%, amarillo del 20 al 40%,
  rojo 10 al 20% y rojo parpadeante por debajo del 5%

  Se utiliza divisor de voltaje con resistencias de 1M y 100K, recomendado condensador
  https://www.diarioelectronicohoy.com/blog/voltimetro-digital-con-arduino
  Hay que tener en cuenta que el ADC de Arduino es de 10 bits, por lo que sólo detecta
  cambios de voltaje (con un divisor de hasta 55V) de más de 0,054V

  La barra LED utilizada es de colores 2 rojos, 3 amarillos y 5 verdes
  Utilizo 3 resistencias; para los rojos de 1Kohm, amarillos de 680K y verdes 220 ohms.
  Se utiliza un divisor de voltaje de hasta 55V (para una batería de 37V pico LiFePo).
  https://startingelectronics.org/articles/arduino/measuring-voltage-with-arduino/

  Además de eso, por el pin D11 se controla por PWM un motor con soft-start de x seg.,
  activado con un interruptor en el pin que indiquemos. Por esta razón todo se hace con la
  más baja latencia de respuesta posible.
  
  Autor: David Losada, basado en trabajos previos de otros autores:
  Parte de código de la referencia rápida del Digispark: http://digistump.com/wiki/digispark/quickref
    
  Version: 0.7 bajo licencia GPLv3
  Fecha: noviembre 2017
  Proyecto Kid's car kit Bilbao

  ==================================================================   */

#include <EEPROMex.h> //Librería para manejo de la EEPROM

//Librerías para dormir al procesador y ahorrar energía cuando no hace nada
//from https://bigdanzblog.wordpress.com/2014/08/10/attiny85-wake-from-sleep-on-pin-state-change-code-example/
#include <avr/sleep.h>
#include <avr/power.h>
#include <avr/wdt.h>
#include <avr/io.h>
#include <avr/interrupt.h> //También para manejar la interrupción por sensor HALL kms/H

//******************* A CAMBIAR SEGÚN TU CONFIGURACIÓN ********************************

//Relación de voltaje y estado de carga de la batería; se puede agregar para cualquier tipo de batería, siempre teniendo en cuenta que estaremos comprobando sólo una celda de hasta 5V
//por lo que es imprescindible utilizar un BMS de equilibrado de celdas en la carga para evitar problemas con las celdas no monitorizadas
//Descomentamos el tipo de batería que queramos utilizar
//(VALORES %: 1%,10%,20%,30%,40%,90%,100%)
//const double mVoltCarga[7]={2.8,3.10,3.17,3.198,3.22,3.4,3.6}; //tabla de relación de voltajes y carga de LIFEPO  (recomendado calibrar (más abajo se indica), por la pequeña diferencia entre estados)
//const double mVoltCarga[7]={3,3.2,3.3,3.6,3.65,4.05,4.2}; //tabla de relación de voltajes y carga de LiCo y LiPo

//(VALORES BARRA 10 LEDS %: 0%,15%,30%,40%,50%,60%,70%,80%,90%,100%) ; no es progresivo, sobre todo en LiFePo4, por eso la conveniencia de valores según porcentajes.
//const double mVoltCarga[10]={1,3.16,3.198,3.216,3.237,3.24,3.25,3.27,3.283,3.4}; //tabla de relación de voltajes y carga de LIFEPO  (recomendado calibrar (más abajo se indica), por la pequeña diferencia entre estados)
const double mVoltCarga[10]={1,3.139,3.194,3.216,3.224,3.227,3.249,3.263,3.282,3.38}; //tabla de relación de voltajes y carga de LIFEPO celda HTCF26650

//Hay que calibrarlo porque las resistencias del divisor de voltaje no son exactas, ni siquiera la referencia interna del Arduino (que dependerá del regulador de voltaje)
const double ajusteVolt=0.07; //IMPORTANTE Aquí se calibra el valor del voltaje que obtenemos por el Arduino, sumando o restando valor

const double delayMotor=10; //Indicamos tiempo en segundos para aceleración completa motor
double PWMMin = 0; //PWM de funcionamiento de arrancada mínima
double PWMMax = 255; //PWM de funcionamiento al máximo de motor

//Definición pines 
//En el ATTiny85 las entradas son (1)=P2; (2)=P4; (3)=P3; (0)=P5 y pines PWM P0, P1 y P4
//(Con #define no se consume memoria)
//#define voltajePIN     A2 //Entrada de voltaje
//#define led1PIN        2 //Pin para activar LED de valor 0-5%
//#define led2PIN        3 //Pin para activar LED de valor 15%
//#define led3PIN        4 //Pin para activar LED de valor 30%
//#define led4PIN        5 //Pin para activar LED de valor 40%
//#define led5PIN        6 //Pin para activar LED de valor 50%
//#define led6PIN        7 //Pin para activar LED de valor 60%
//#define led7PIN        8 //Pin para activar LED de valor 70%
//#define led8PIN        9 //Pin para activar LED de valor 80%
//#define led9PIN        10 //Pin para activar LED de valor 90%
//#define motorPIN       11 //Pin regulación motor PWM
//#define led10PIN       12 //Pin para activar LED de valor 100%

//Otra forma de definir los pines más rápida pero consumiendo memoria
int ledPins[] = {
  12, 10, 9, 8, 7, 6, 5, 4, 3, 2
};   // array de números de pin a los que conectamos los LED
#define motorPWM       11 //Pin regulación motor PWM
#define pulsador       A3 //Interruptor activación motor
#define bateriaPIN     A1 //Entrada de voltaje con divisor
#define cargaPIN       A2 //Entrada de voltaje con divisor del punto de carga
const int ledCont = 10;   //Número de Leds de la barra
const int celdas = 10; // Número de celdas de la batería (para dividir voltaje)

//*************************************************************************************

int ledLevel= 0;          //Número de leds a encender
int posLed = 0;           //Para cuando no tenemos valor LED, indicar que está funcionando con encendido secuencial

unsigned long millisInicio; //Para comprobar paso de horas
//Esto es necesario para no hacer uso de Delays que hacen que el programa tenga latencia de respuesta. Así es todo inmediato, sólo le lleva el tiempo que tarde en procesar cada bucle.
unsigned long millisMotor; //Para comprobar tiempo desde que hemos activado el motor
unsigned long millisSeg; //Para controlar tiempos en tres estados no simultáneos; con batería y cargando, sin conectar, y sin batería parpadeando rojo.
unsigned long millisCarga; //Para controlar tiempos durante la recarga.

boolean pulsPrevia=false; //Comprobar si estaba motor activado de antes
double powerMotor; //Valor PWM a activar el motor

//Para voltaje de batería
double voltajeMuestras[3]={0,0,0}; //Valores obtenidos muestras
double voltaje=0;     //Voltaje obtenido
double voltajePrevio; //Para que no oscile entre leds, no cambiamos hasta que cambie el voltaje más de 0,005V
int thisLed; //Posición Led a iluminar
boolean cargando=false; //comprobar si previamente estábamos en carga
boolean ledEncendido=false; //Situación previa led rojo parpadeante

//Obtenemos voltaje de carga transformador
double voltajeCarga=0; //Valor de voltaje de carga

void setup()   { 

//Resetea la EEPROM la primera vez que la usamos
EEPROM.setMemPool(0,512); //Establecemos inicio y tamaño de EEPROM de la tarjeta utilizada
EEPROM.setMaxAllowedWrites(128); //Mínimo para que pueda hacerse el primer borrado completo
//rellenamos de 0 los datos de EEPROM
if (EEPROM.readLong(508)!=7091976) { //En ese punto, preferiblemente al final, guardo un valor para saber si ya la he reseteado
  for(int i=0; i<500; i=i+4) { //Ajustar el valor según el tamaño de la (EEPROM)-8
     EEPROM.update(i,0);
      }
  EEPROM.update(508,7091976); //Almacenamos un número indicativo de que ya se ha inicializado en la última posición
  Serial.println("Borrado de EEPROM terminado"); //sólo debería aparecer 1 vez
}

//Actualizamos contador de encendidos
EEPROM.update(11,EEPROM.readLong(11)+1);

  //Líneas de configuración del WatchDog Timer para dormir al procesador
  //*** AHORA MISMO NO SE UTILIZA PARA QUE EL PROGRAMA NO TENGA LATENCIA ****
  /*** Setup the WDT ***/

  /* Clear the reset flag. */
  MCUSR &= ~(1 << WDRF);

  /* In order to change WDE or the prescaler, we need to
     set WDCE (This will allow updates for 4 clock cycles).
  */
  WDTCSR |= (1 << WDCE) | (1 << WDE);

  /* set new watchdog timeout prescaler voltaje */
  //WDP3 - WDP2 - WPD1 - WDP0 - time
  // 0      0      0      0      16 ms
  // 0      0      0      1      32 ms
  // 0      0      1      0      64 ms
  // 0      0      1      1      0.125 s
  // 0      1      0      0      0.25 s
  // 0      1      0      1      0.5 s
  // 0      1      1      0      1.0 s
  // 0      1      1      1      2.0 s
  // 1      0      0      0      4.0 s
  // 1      0      0      1      8.0 s

  WDTCSR = 1 << WDP2 | 1 << WDP1; /* 1.0 seconds */
  //WDTCSR = 1<<WDP2 | 1<<WDP1 | 1<<WDP0; /* 2.0 seconds */
  //WDTCSR = 1<<WDP3; /* 4.0 seconds */
  //WDTCSR = 1<<WDP0 | 1<<WDP3; /* 8.0 seconds */

  /* Enable the WD interrupt (note no reset). */
  WDTCSR |= _BV(WDIE);


//Definir pines
//You need not set pin mode for analogRead - though if you have set the pin to
//output and later want to read from it then you need to set pinMode(0,INPUT);
//where 0 is the physical pin number not the analog input number.
//pinMode(PIN, OUTPUT);
pinMode(bateriaPIN,INPUT); //Entrada de voltaje
pinMode(cargaPIN,INPUT); //Divisor de voltaje en cargador (añadir diodos)
pinMode(motorPWM,OUTPUT); //Pin regulación motor PWM
pinMode(pulsador,INPUT); //Interruptor activación motor
// Establecemos todos los pines LED a output:
  for (int thisLed = 0; thisLed < ledCont; thisLed++) {
    pinMode(ledPins[thisLed], OUTPUT);
  }

millisInicio=millis();
//Encendemos los LEDs para indicar puesta en marcha y comprobar que funcionan
//Eliminar esto si necesitamos más memoria para el programa
//Enciende todos con pausas
for (int thisLed = 0; thisLed < ledCont; thisLed++) {
  digitalWrite(ledPins[thisLed], HIGH);
  delay(100);
  }
//Apaga todos
for (int thisLed = 10; thisLed > 0; thisLed--) {
  digitalWrite(ledPins[thisLed], LOW);
  delay(100);
  }

Serial.begin(9600);
Serial.println("Iniciamos programa");

}

void loop() {

//Leemos la entrada para ver si se ha activado motor
//Comprobamos si estaba activado, y actuamos sobre el motor
if (digitalRead(pulsador)) {
  if (pulsPrevia) {
    //Calculamos tiempo pasado y PWM correspondiente
    if (((millis()-millisMotor)/1000)>delayMotor) {
      powerMotor=PWMMax;  
    }
    else {
      powerMotor=doubleMap((millis()-millisMotor)/double(1000), double(0), delayMotor, PWMMin, PWMMax);
      if (powerMotor>255) {
        powerMotor=255;
      }
    }
  }
  else {
    pulsPrevia=true;
    millisMotor=millis();
    powerMotor=PWMMin;
  }
}  
else { //Si no está activado el interruptor, paramos
  pulsPrevia=false;
  powerMotor=0;
}
analogWrite(motorPWM,powerMotor);

//Serial.println(powerMotor);

// CÓDIGO OBTENCIÓN VOLTAJE **************************
//Recoge 3 muestras de voltaje batería para sacar medias
//Serial.println("Leemos valores");
for (int x = 0; x < 3; x++) {
  //coge el voltaje en milivoltios, pasamos a voltios con la rutina doubleMap
  voltajeMuestras[x] = doubleMap(analogRead(bateriaPIN), 0, 1023, 0, 55); //Pasamos los valores de entre 0 a 1023 a valores entre 0 y 5V
  delay(15); // espera entre lecturas
}
//Ordenamos para descartar bajo y alto y eliminar posibles errores; un condensador lo estabiliza bastante
for (int x = 0; x < 3; x++) {
  for (int y = 0; y < 3; y++) {
    if (voltajeMuestras[y] < voltajeMuestras[y + 1]) {
      voltaje = voltajeMuestras[y];
      voltajeMuestras[y] = voltajeMuestras[y + 1];
      voltajeMuestras[y + 1] = voltaje;
    }
  }
}

//Obtenemos voltaje en mV (milliVoltios)
voltaje = (((double)voltajeMuestras[1])/celdas)+ajusteVolt;
if (voltaje<0) {
  voltaje=0;
  }
if (voltajePrevio==0) {
  voltajePrevio=voltaje;
}
else { //Nos aseguramos de que vaya por tramos de 0,003 para que no oscilen los LED
  if (abs(voltaje-voltajePrevio)<0.003 and abs(voltaje-voltajePrevio)>0) {
    voltaje=voltajePrevio;
  }
  else {
    voltajePrevio=voltaje;
  }
}
//voltaje = 3.21; //for debugging

//Voltaje de carga
voltajeCarga = ((doubleMap(analogRead(cargaPIN), 0, 1023, 0, 55)/celdas)+ajusteVolt); //Pasamos los valores de entre 0 a 1023 a valores entre 0 y 5V
if (voltajeCarga<0) {
  voltajeCarga=0;
}

////Debugging
Serial.print(voltaje); //curiosamente estas líneas hacen que se resetee el arduino aleatoriamente...
Serial.println("V voltaje");
Serial.print(voltajeCarga); //curiosamente estas líneas hacen que se resetee el arduino aleatoriamente...
Serial.println("V carga");
delay(500);

//Establecemos el número de elementos a iluminar
ledLevel=0;
if (voltaje>1) {
  for (int thisLed = 0; thisLed < ledCont; thisLed++) {
    if (voltaje>mVoltCarga[thisLed]) {
      ledLevel=thisLed+1;
    }
  }
}

// Encendemos los LED correspondientes
for (int thisLed = 0; thisLed < ledCont; thisLed++) {
  // Si el índice del array es menor o igual que el número de leds a encender,
  // ponemos el pin de ese elemento en ON:
  if (thisLed < ledLevel) { 
    if (ledLevel>1) { //sólo activamos el primero si encendemos más de un led 
      digitalWrite(ledPins[thisLed], HIGH);
      if (ledLevel==2) {
        digitalWrite(ledPins[0], HIGH); //(Del primero se encarga el bloque de parpadeo)
      }
    }
  }
  // apagamos los led por encima de ése:
  else {
    if (voltajeCarga<voltaje) { //sólo si no se está cargando
      digitalWrite(ledPins[thisLed], LOW);
      }
      else {
        exit;
      }
  }
}

////Si sólo está encendido el primer rojo (5%) lo hacemos parpadear
if (ledLevel==1) {
  if ((millis()-millisSeg)>400) {//Cada x ms cambiamos estado LED
    millisSeg=millis(); //Reseteamos temporizador parpadeo
    if (ledEncendido) {
      digitalWrite(ledPins[0], LOW);
      ledEncendido=false;
    }
    else {
      digitalWrite(ledPins[0], HIGH);
      ledEncendido=true;
    }
  }
}

//Si se está cargando, encendemos los apagados
//Mientras esté cargando, del lado previo al diodo tendremos voltaje más alto (el diodo tiene cierta resistencia).
if (voltajeCarga>voltaje and voltaje>1) {
  if (cargando) {
    if ((millis()-millisCarga)>800) {
      millisCarga=millis(); //Reseteamos
      digitalWrite(ledPins[posLed], HIGH);
      posLed++;
      if (posLed>10) {
        posLed=thisLed+1; //Empezamos donde termina el indicador de voltaje
        for (int thisLed = ledLevel; thisLed < ledCont; thisLed++) { //APAGAMOS de nuevo todos
          digitalWrite(ledPins[thisLed], LOW); 
        }
      }
    }
  }
    else {
      cargando=true;
      posLed=thisLed+1;
    }
} 
else {
  cargando=false;
}

//Si no se detecta voltaje, vamos encendiendo secuencialmente todos
if (voltaje<=1) {
  if (posLed<11) {
    if ((millis()-millisSeg)>800) {
        millisSeg=millis(); //Reseteamos temporizador parpadeo
        digitalWrite(ledPins[posLed], HIGH);
        if (posLed>0) {
          digitalWrite(ledPins[posLed-1], LOW);
          }
        posLed++;
        }
  }
}
if (posLed>10) {
  posLed=0;
}
  
//Comprobamos si millis se ha desbordado (tras 50 días encendido)
if (millisInicio>millis()) {
  millisInicio=millis();
}

//Guardamos datos estadísticos de uso de la batería en EEPROM
if ((millis()-millisInicio)>3600000) { //Ha pasado una hora
  millisInicio=millis(); //Reseteamos contador
  //Horas funcionamiento Arduino (batería activada)
  EEPROM.update(0,EEPROM.readLong(0)+1); //Añadimos una hora al contador 
  //Contador de horas recargando baterías (servirá para sacar las recargas totales)
  if (voltajeCarga>voltaje) {
    EEPROM.update(7,EEPROM.readLong(7)+1); //Añadimos una hora al contador 
  }
  if (voltaje>1) { //Sólo si tenemos un valor válido
    //Voltaje máximo histórico
    if (EEPROM.readLong(15)<voltaje) { //Comprobamos valor máximo y actualizamos
      EEPROM.update(15,voltaje);
    }
    //Voltaje mínimo histórico
    if (EEPROM.readLong(19)>voltaje)  { //Comprobamos valor mínimo y actualizamos
      EEPROM.update(19,voltaje);
    }
  }
  //De la posición EEPROM 50 a 90 contabilizamos horas en cada porcentaje de carga
  EEPROM.update(50+(ledLevel*4),EEPROM.readLong(50+(ledLevel*4)));
}

//enterSleep(); //Paramos 1 seg.; ahorramos batería ya que está el 99% del tiempo "dormido"
//Anulado; Necesitamos que se ejecute de seguido para tener baja latencia de respuesta
        
}

// *************** RUTINAS LECTURA VOLTAJE ***************
double doubleMap(double x, double in_min, double in_max, double out_min, double out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}


//Code from http://donalmorrissey.blogspot.com.es/2010/04/sleeping-arduino-part-5-wake-up-via.html
/***************************************************
    Name:        ISR(WDT_vect)

    Returns:     Nothing.

    Parameters:  None.

    Description: Watchdog Interrupt Service. This
                 is executed when watchdog timed out.

 ***************************************************/
ISR(WDT_vect)
{
  //Aquí el código que queremos se ejecute cuando el watchdog "despierta" al procesador

}


/***************************************************
    Name:        enterSleep

    Returns:     Nothing.

    Parameters:  None.

    Description: Enters the arduino into sleep mode.

 ***************************************************/
void enterSleep(void)
{
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);   /* EDIT: could also use SLEEP_MODE_PWR_SAVE for less power consumption. */
  sleep_enable();

  /* Now enter sleep mode. */
  sleep_mode();

  /* The program will continue from here after the WDT timeout*/
  sleep_disable(); /* First thing to do is disable sleep. */

  /* Re-enable the peripherals. */
  power_all_enable();
}
